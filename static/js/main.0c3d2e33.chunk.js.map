{"version":3,"sources":["Components/loginFooter.js","Components/formErrors.js","Components/form.js","Components/loginCard.js","Components/infoLine.js","App.js","serviceWorker.js","index.js"],"names":["LoginFooter","className","id","href","FormErrors","props","error","Error","Form","onSubmit","event","handleSubmit","type","name","placeholder","value","this","FormData","email","required","onChange","handleForm","errors","password","onBlur","validate","Component","LoginCard","setState","target","preventDefault","state","redirect","valid","length","alert","window","location","alt","src","InfoLine","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c3d2e33.chunk.js","sourcesContent":["import React from 'react'\n\nconst LoginFooter = () => {\n\n  return (\n    <div className=\"card-footer\">\n      <p id=\"help-links\">\n        <a href=\"https://www.homebinder.com/passwords/reset\" className=\"orange-text\">Forgot my password</a> | <a href=\"https://www.homebinder.com/homeowners/register\" className=\"orange-text\">Sign Up</a>\n      </p>\n      <p id=\"copyright\">\n      Â© 2019 HomeBinder\n      </p>\n    </div>\n  )\n\n}\n\nexport default LoginFooter;\n","import React from 'react';\n\n// props = Error,\n\nconst FormErrors = (props) => {\n\n// Checks, if error is not null (contains an error message string), then return the error message\n  const displayErrors = (error) =>{\n    return error ? <p className=\"error-message\">{error}</p> : null;\n  }\n\n  return(\n\n    displayErrors(props.Error)\n\n  )\n}\n\nexport default FormErrors;\n","import React, { Component } from 'react';\nimport FormErrors from './formErrors'\n//props = FormData, handleForm(), handleSubmit(), errors, validate()\n\nclass Form extends Component {\n\n  render (){\n    return (\n      <div className=\"card-body\">\n\n        <form onSubmit={event=>{this.props.handleSubmit(event)}} >\n          <div className=\"form-group\">\n            <input\n            // HTML5 will validate email in most browsers with type='email'\n              type=\"email\"\n              name=\"email\"\n              className=\"form-control\"\n              placeholder=\"Email Address\"\n              value={this.props.FormData.email}\n              required\n              onChange={event => this.props.handleForm(event)}\n              // Don't need if using HTML5 email validation\n              // onBlur={()=>{this.props.validate(this.props.FormData.email, null)}}\n            />\n            <FormErrors Error={this.props.FormData.errors.email}/>\n\n            <input\n              type=\"password\"\n              name=\"password\"\n              className=\"form-control\"\n              placeholder=\"Password\"\n              required\n              onChange={event => this.props.handleForm(event)}\n              value={this.props.FormData.password}\n              // When clicking out of input field, will validate before clicking submit\n              onBlur={()=>{this.props.validate(null, this.props.FormData.password)}}\n            />\n            <FormErrors Error={this.props.FormData.errors.password}/>\n\n          </div>\n\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-danger\"\n          >\n            Login\n            </button>\n\n\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport LoginFooter from './loginFooter'\nimport Form from './form'\n\n\nclass LoginCard extends Component {\n\n  constructor () {\n    super()\n    this.state = {\n      email: '',\n      password: '',\n      errors: {\n        email: null,\n        password: null,\n      }\n    }\n  }\n\n  render(){\n    return(\n\n      <div className=\"card text-center row col-lg-5 col-md-10 \">\n        <div className=\"card-header\">\n          <img alt=\"HomeBinder Logo\" src=\"https://www.homebinder.com/img/flatlogo.png\"/>\n        </div>\n        <Form\n          FormData={this.state}\n          handleForm={this.handleForm}\n          handleSubmit={this.handleSubmit}\n          validate={this.validate}\n        />\n        <LoginFooter/>\n      </div>\n    )\n  }\n\n// Will update state with event values when onChange is triggered as user types\n  handleForm = (event) => {\n      this.setState({\n        [event.target.name]: event.target.value\n      })\n  }\n\n// validates email and password on submit, if valid = true, will redirect\n  handleSubmit = (event) => {\n    event.preventDefault()\n\n    const { email, password } = this.state;\n\n    return this.validate(email, password) ?  this.redirect() : null;\n  }\n\n// Resets valid = true and errors to null, if password/email are not valid, will set valid = false and set error messages.\n  validate = (email, password) => {\n    let valid = true;\n    this.setState({\n      ...this.state,\n      errors:{\n        email: null,\n        password: null,\n      }\n    })\n    //Don't need this with html5 type=email\n    /*\n    let emailError = \"Not a valid email\";\n    let emailPattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n    if (email && !email.match(emailPattern)){\n      this.setState({\n        this.state.errors.email: emailError\n      })\n      valid = false;\n    }\n    */\n\n    let passwordError = \"Too short\";\n\n    if (password && password.length < 8){\n      this.setState({\n        ...this.state,\n        errors: {\n          ...this.state.errors,\n          password: passwordError\n        }\n      })\n      valid = false;\n    }\n\n    return valid;\n  }\n\n  // If email/password are valid, will alert and redirect to home page\n  redirect = () => {\n    alert(\"Submitted!\");\n\n    return window.location = 'https://www.homebinder.com/';\n  }\n\n}\n\nexport default LoginCard;\n","import React from 'react';\n\nconst InfoLine = props => {\n\n  return(\n    <div className=\"info-line\">\n      <p>\n        Need help? No problem!\n      </p>\n      <p>\n      Email <a href=\"mailto:support@homebinder.com\" target=\"_top\" className=\"orange-text\">support@homebinder.com</a> or Call 800-377-6915\n      </p>\n    </div>\n  )\n\n}\n\nexport default InfoLine;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport LoginCard from './Components/loginCard';\nimport InfoLine from './Components/infoLine'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LoginCard/>\n      <InfoLine/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}